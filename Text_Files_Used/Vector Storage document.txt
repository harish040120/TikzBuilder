Introduction
TikZ is probably the most complex and powerful tool to create graphic elements in LaTeX. Starting with a simple example, this article introduces some basic concepts: drawing lines, dots, curves, circles, rectangles etc.

Firstly, load the tikz package by including the line \usepackage{tikz} in the preamble of your document, then draw a graphic using the tikzpicture environment.

\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\draw[gray, thick] (-1,2) -- (2,-4);
\draw[gray, thick] (-1,-1) -- (2,2);
\filldraw[black] (0,0) circle (2pt) node[anchor=west]{Intersection point};
\end{tikzpicture}
\end{document}
 Open this example in Overleaf

This example produces the following output:

OLV2tikz1.png

In this example two lines and one point are drawn. To add a line the command \draw[gray, thick] defines a graphic element whose colour is gray and with a thick stroke. The line is actually defined by it's two endpoints, (-1,2) and (2,-4), joined by --.

The point is actually a circle drawn by \filldraw[black], this command will not only draw the circle but fill it using black. In this command the centre point (0,0) and the radius (2pt) are declared. Next to the point is a node, which is actually a box containing the text intersection point, and anchored at the west of the point.

It's important to notice the semicolon ; used at the end of each draw command.

Note: The tikzfigure environment can be enclosed inside a figure or similar environment. See the Inserting Images article for more information on this topic.

Basic elements: points, lines and paths
In this section we provide some examples showing how to create some basic graphic elements which can be combined to create more elaborate figures.

\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}

\draw (-2,0) -- (2,0);
\filldraw [gray] (0,0) circle (2pt);
\draw (-2,-2) .. controls (0,0) .. (2,-2);
\draw (-2,2) .. controls (-1,0) and (1,0) .. (2,2);

\end{tikzpicture}
\end{document}
 Open this example in Overleaf

This example produces the following output:

OLV2tikz2.png

There are three basic commands in this example:

\draw (-2,0) -- (2,0);: This defines a line whose endpoint are (-2,0) and (2,0).
\filldraw [gray] (0,0) circle (2pt);: The point is created as a very small gray circle centred at (0,0) and whose radius is (2pt). The \filldraw command is used to draw elements and fill them with a specific colour. See the next section for more examples.
\draw (-2,2) .. controls (-1,0) and (1,0) .. (2,2);: Draws a Bézier curve. There are 4 points defining it: (-2,2) and (2,2) are its endpoints, (-1,0) and (1,0) are control points that determine "how curved" it is. You can think of these two points as "attractor points".
Basic geometric shapes: Circles, ellipses and polygons
Geometric figures can be constructed from simpler elements so let's start with circles, ellipses and arcs.

\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\filldraw[color=red!60, fill=red!5, very thick](-1,0) circle (1.5);
\fill[blue!50] (2.5,0) ellipse (1.5 and 0.5);
\draw[ultra thick, ->] (6.5,0) arc (0:220:1);
\end{tikzpicture}
\end{document}
 Open this example in Overleaf

This example produces the following output:

TikzEx3.png

\filldraw[color=red!60, fill=red!5, very thick](-1,0) circle (1.5);: This command was used in the previous section to draw a point, but in this instance there are some additional parameters inside the brackets. These are explained below:
color=red!60: The colour of the ring around the circle is set to 60% red (lighter than "pure" red). See the reference guide for a list of the default colours available in LaTeX; also, see Using colours in LaTeX to learn how to create your own colours.
fill=red!5: The circle is filled with an even lighter shade of red.
very thick: This parameter defines the thickness of the stroke. See the reference guide for a complete list of values.
\fill[blue!50] (2.5,0) ellipse (1.5 and 0.5);: To create an ellipse you provide a centre point (2.5,0), and two radii: horizontal and vertical (1.5 and 0.5 respectively). Also notice the command fill instead of draw or filldraw, this is because, in this case, there's no need to control outer and inner colours.
\draw[ultra thick, ->] (6.5,0) arc (0:220:1);: This command will draw an arc starting at (6.5,0). The extra parameter -> indicates that the arc will have an arrow at the end. In addition to the starting point you must provide three additional values: the starting and ending angles, and the radius; here, these three parameter values are provided in the format (0:220:1).
In addition to curved geometric shapes you can also create elements that use straight lines, using a similar syntax:

\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\draw[blue, very thick] (0,0) rectangle (3,2);
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;
\end{tikzpicture}
\end{document}
 Open this example in Overleaf

This example produces the following output:

OLV2tikz4.png

\draw[blue, very thick] (0,0) rectangle (3,2);: Rectangles are created by the special command rectangle. You have to provide two points, the first one is where the "pencil" begins to draw the rectangle and the second one is the diagonally opposite corner point.
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;: To draw a polygon we draw a closed path of straight lines: a line from (4,0) to (6,0) and a line from (6,0) to (5.7,2). The cycle instruction means that the start and end points should coincide to create a "closed" path (shape), which results in construction of the final line segment.
Diagrams
Nodes are probably the most versatile elements in TikZ. We've already used one node in the introduction—to add some text to the figure. The next example uses nodes to create a diagram.

\documentclass{article}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}[
roundnode/.style={circle, draw=green!60, fill=green!5, very thick, minimum size=7mm},
squarednode/.style={rectangle, draw=red!60, fill=red!5, very thick, minimum size=5mm},
]
%Nodes
\node[squarednode]      (maintopic)                              {2};
\node[roundnode]        (uppercircle)       [above=of maintopic] {1};
\node[squarednode]      (rightsquare)       [right=of maintopic] {3};
\node[roundnode]        (lowercircle)       [below=of maintopic] {4};

%Lines
\draw[->] (uppercircle.south) -- (maintopic.north);
\draw[->] (maintopic.east) -- (rightsquare.west);
\draw[->] (rightsquare.south) .. controls +(down:7mm) and +(right:7mm) .. (lowercircle.east);
\end{tikzpicture}
\end{document}
 Open this example in Overleaf

This example produces the following output:

OLV2tikz5.png

There are essentially three commands in this figure: A node definition, a node declaration and lines that join two nodes.

roundnode/.style={circle, draw=green!60, fill=green!5, very thick, minimum size=7mm}: Passed as a parameter to the tikzpicture environment. It defines a node that will be referenced as roundnode: this node will be a circle whose outer ring will be drawn using the colour green!60 and will be filled using green!5. The stroke will be very thick and its minimum size is 7mm. The line below this defines a second rectangle-shaped node called squarednode, using similar parameters.
\node[squarednode] (maintopic) {2};: This will create a squarednode, as defined in the previous command. This node will have an id of maintopic and will contain the number 2. If you leave an empty space inside the braces no text will be displayed.
[above=of maintopic]: Notice that all but the first node have an additional parameter that determines its position relative to other nodes. For instance, [above=of maintopic] means that this node should appear above the node named maintopic. For this positioning system to work you have to add \usetikzlibrary{positioning} to your preamble. Without the positioning library, you can use the syntax above of=maintopic instead, but the positioning syntax is more flexible and powerful: you can extend it to write above=3cm of maintopic i.e. control the actual distance from maintopic.
\draw[->] (uppercircle.south) -- (maintopic.north);: An arrow-like straight line will be drawn. The syntax has been already explained in the basic elements section. The only difference is the manner in which we write the endpoints of the line: by referencing a node (this is why we named them) and a position relative to the node.
Reference Guide
Possible color and thickness parameters in the tikz package:

parameter	values	picture
color	white, black, red, green, blue, cyan, magenta, yellow	BasicColours.png
thickness	ultra thin, very thin, thin, thick, very thick, ultra thick	Thickness.png
More colours may be available in your LaTeX distribution. See Using colours in LaTeX




Examples:

A rectangular grid

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[thin,dotted] (-3,-3) grid (3,3);
  \draw[->] (-3,0) -- (3,0);
  \draw[->] (0,-3) -- (0,3);
\end{tikzpicture}
\end{document}


Cartesian coordinate system

\documentclass[tikz,border=10pt]{standalone}
\usetikzlibrary{calc}
\newcommand{\minus}{\raisebox{0.96pt}{-}}
\begin{document}
\begin{tikzpicture}[every node/.style={font=\sffamily\small}]
  \draw[thin,dotted] (-3,-3) grid (3,3);
  \draw[->] (-3,0) -- (3,0) node[right] {x};
  \draw[->] (0,-3) -- (0,3) node[above] {y};
  \foreach \x/\xlabel in {-2/{\minus 2\hphantom{-}}, -1/{\minus 1\hphantom{-}}, 1/1, 2/2}
    \draw (\x cm,1pt ) -- (\x cm,-1pt ) node[anchor=north,fill=white] {\xlabel};
  \foreach \y/\ylabel in {-2/{\minus 2}, -1/{\minus 1}, 1/1, 2/2}
    \draw (1pt,\y cm) -- (-1pt ,\y cm) node[anchor=east, fill=white] {\ylabel};%  \draw[fill=black] (-1,1) circle (0.08);
  \draw[fill=black] (-2,-1) circle (0.08) node[above right] {\footnotesize (\raisebox{0.8pt}{-}2,\raisebox{0.8pt}{-}1)};
  \draw[fill=black] (0,0) circle (0.08) node[above right] {\footnotesize (0,0)};
  \draw[fill=black] (1,2) circle (0.08) node[above right] {\footnotesize (1,2)};
\end{tikzpicture}
\end{document}


A square in Cartesian coordinates

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[thin,dotted] (-3,-3) grid (3,3);
  \draw[->] (-3,0) -- (3,0);
  \draw[->] (0,-3) -- (0,3);
  \draw[very thick, blue] (-2,-2) -- (-2,2)
  -- (2,2) -- (2,-2) -- cycle;
\end{tikzpicture}
\end{document}



Circles in Cartesian coordinates

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[thin,dotted] (-3,-3) grid (3,3);
  \draw[->] (-3,0) -- (3,0);
  \draw[->] (0,-3) -- (0,3);
  \draw[very thick, blue] (-2,-2) circle (1) (-2,2)
    circle (1) (2,2) circle (1) (2,-2) circle (1);
\end{tikzpicture}
\end{document}


A hexagon in polar coordinates

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[thin,dotted] (-3,-3) grid (3,3);
  \draw (-3,0) -- (3,0);
  \draw (0,-3) -- (0,3);
  \draw[very thick, blue] (0:2) -- (60:2) -- (120:2)
    -- (180:2) --(240:2) -- (300:2) -- cycle;
\end{tikzpicture}
\end{document}


The square and circle in three dimensions


\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}[y={(-0.86cm,0.5cm)},x={(0.86cm,0.5cm)}, z={(0cm,1cm)},font=\sffamily]
  \draw[very thick, blue] (-2,-2,0) -- (-2,2,0) -- (2,2,0) -- (2,-2,0) -- cycle;
  \draw[->] (0,0,0) -- (2.5, 0,  0) node [right] {x};
  \draw[->] (0,0,0) -- (0,  2.5, 0) node [left] {y};
  \draw[->,dashed] (0,0,0) -- (0,  0, 2.5) node [above] {z};
  \draw circle (2);
\end{tikzpicture}
\end{document}


A smiley with color

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[fill=yellow] (0,0) circle [radius=2];
  \draw[fill=black] (-0.5,0.5,0) ellipse [x radius=0.2, y radius=0.4];
  \draw[fill=black] (0.5,0.5,0) ellipse [x radius=0.2, y radius=0.4];
  \draw[very thick] (-1,-1) arc [start angle=185, end angle=355,
    x radius=1, y radius=0.5];
\end{tikzpicture}
\end{document}


A smiley with a three-dimensional appearance

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \draw[shading=ball, ball color=yellow] (0,0) circle [radius=2];
  \draw[shading=ball, ball color=black] (-0.5,0.5,0) ellipse [x radius=0.2, y radius=0.4];
  \draw[shading=ball, ball color=black] (0.5,0.5,0) ellipse [x radius=0.2, y radius=0.4];
  \draw[very thick] (-1,-1) arc [start angle=185, end angle=355,
    x radius=1, y radius=0.5];
\end{tikzpicture}
\end{document}

A basic edge connecting two nodes

\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}
  \node (tex) [fill=orange, text=white] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2},
    text=white, right=of tex] {PDF};
  \draw (tex) edge[->] (pdf);
\end{tikzpicture}
\end{document}

An edge with a text label
\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}
  \node (tex) [fill=orange, text=white] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2},
    text=white, right=of tex] {PDF};
  \draw (tex) edge[->] node[font=\tiny\ttfamily,above] {pdflatex} (pdf);
\end{tikzpicture}
\end{document}

Four nodes

\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning,quotes}
\begin{document}
\begin{tikzpicture}[
    every node/.style = {text=white, minimum width = 1.1cm},
    every edge/.style = {draw,->},
    every edge quotes/.style = {auto, font=\tiny\ttfamily, text=black}]
  ]
  \node (tex) [fill=orange] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2}, right = of tex] {PDF};
  \node (dvi) [fill=blue, above = of tex] {DVI};
  \node (ps)  [fill=black!60,above = of pdf] {PS};
\end{tikzpicture}
\end{document}


Many edges with text


\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning,quotes}
\begin{document}
\begin{tikzpicture}[
    every node/.style = {text=white, minimum width = 1.1cm},
    every edge/.style = {draw,->},
    every edge quotes/.style = {auto, font=\tiny\ttfamily, text=black}]
  ]
  \node (tex) [fill=orange] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2},right = of tex] {PDF};
  \node (dvi) [fill=blue, above = of tex] {DVI};
  \node (ps)  [fill=black!60, above = of pdf] {PS};
  \draw (tex) edge["pdflatex"] (pdf);
  \draw (tex) edge["latex"]    (dvi);
  \draw (dvi) edge["dvips"]    (ps);
  \draw (dvi) edge["dvipdfmx"] (pdf);
  \draw (ps)  edge["ps2pdf"]   (pdf);
\end{tikzpicture}
\end{document}



Sloped text on edges


\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning,quotes}
\begin{document}
\begin{tikzpicture}[
    every node/.style = {font=\large, text=white},
    every edge/.style = {draw, ->},
    every edge quotes/.style = {auto, font=\ttfamily\tiny,
      text=black, fill=none, sloped}]
  \node (tex) [fill = orange] {TEX};
  \node (pdf) [fill = {rgb:red,244;green,15;blue,2}, right = of tex] {PDF};
  \node (dvi) [fill = blue, above = of tex] {DVI};
  \node (ps)  [fill = black!60, above = of pdf] {PS};
  \draw (tex) edge["pdflatex"] (pdf);
  \draw (tex) edge["latex"]    (dvi);
  \draw (dvi) edge["dvips"]     (ps);
  \draw (ps)  edge["ps2pdf"]   (pdf);
  \draw (dvi) edge["dvipdfmx"] (pdf);
\end{tikzpicture}
\end{document}




Barbed arrows

\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{arrows.meta}
\begin{document}
\begin{tikzpicture}[yscale=-1, y=2.5ex]
  \foreach \tip [count=\i] in {
    Arc Barb, Bar, Bracket, Hooks, Parenthesis,
    Straight Barb, Tee Barb
  } {
    \draw [-{\tip}] (0, \i) to ++(0.5, 0)
      node [right] {\texttt{\tip}};
  }
\end{tikzpicture}
\end{document}


 A customized arrow tip

\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning,arrows.meta}
\begin{document}
\begin{tikzpicture}
  \node (tex) [fill=orange, text=white] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2},
    text=white, right=of tex] {PDF};
  \draw (tex) edge[very thick, draw=red,
    -{Stealth[color=orange, fill=red, width=8pt, length=10pt]}]
    (pdf);
\end{tikzpicture}
\end{document}



A curvy line with an arrow tip

\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}
  \node (tex) [fill=orange, text=white] {TEX};
  \node (pdf) [fill={rgb:red,244;green,15;blue,2},
    text=white, right=of tex] {PDF};
  \draw[->] (tex) to[out=45, in=225, looseness=1.5] (pdf);
\end{tikzpicture}
\end{document}


A simple tree

\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \node {A} child { node {1} edge from parent };
\end{tikzpicture}
\end{document}

A customized edge in a tree


\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \node {A} child { node {1}
    edge from parent [dashed, ->]
    node[above, sloped, font=\tiny] {down} };
\end{tikzpicture}
\end{document}



A tree with five children
\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \node {A}
    child { node {1} }
    child { node {2} }
    child { node {3} }
    child { node {4} }
    child { node {5} }
  ;
\end{tikzpicture}
\end{document}



A tree with custom style options
\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}[thick]
  \node [draw, black, rectangle] {A}
    [red, ->]
    child { node {1} }
    child { node {2} }
    child [densely dashed]
      { node [draw, blue, circle] {3} }
    child { node {4} }
    child { node {5} }
  ;
\end{tikzpicture}
\end{document}


A minimal TeX relationship tree
\documentclass[tikz,border=10pt]{standalone}
\usepackage{hvlogos}
\begin{document}
\begin{tikzpicture}
  \node {\TeX}
    child { node {\LaTeX} }
    child { node {\ConTeXt} }
  ;
\end{tikzpicture}
\end{document}



 A TeX and LaTeX relationship tree

\documentclass[tikz,border=10pt]{standalone}
\usepackage{hvlogos}
\begin{document}
\begin{tikzpicture}
  \node {\TeX}
    child { node {\LaTeX}
      child { node {\pdfLaTeX} }
      child { node {\XeLaTeX} }
      child { node {\LuaLaTeX} }
    }
    child { node {\ConTeXt} }
  ;
\end{tikzpicture}
\end{document}



Adjusted distances in a tree

\documentclass[tikz,border=10pt]{standalone}
\usepackage{hvlogos}
\begin{document}
\begin{tikzpicture}[
  level 1/.style = { level distance   = 8mm,
                     sibling distance = 20mm },
  level 2/.style = { level distance   = 10mm,
                     sibling distance = 20mm } ]
  \node {\TeX}
    child { node {\LaTeX}
      child { node {\pdfLaTeX} }
      child { node {\XeLaTeX} }
      child { node {\LuaLaTeX} }
    }
    child { node {\ConTeXt} }
  ;
\end{tikzpicture}
\end{document}


A colored tree

\documentclass[tikz,border=10pt]{standalone}
\usepackage{hvlogos}
\begin{document}
\begin{tikzpicture}[
  level 1/.style = { level distance = 8mm,
                     sibling distance = 20mm },
  level 2/.style = { level distance = 10mm,
                     sibling distance = 20mm }, 
  treenode/.style = {shape = rectangle,
    rounded corners, draw,
    top color=white, bottom color=blue!30},
  every child node/.style = {treenode},
  engine/.style = {inner sep = 1pt, font=\tiny, above}
]
\node [treenode] {\TeX}
  child { node {\LaTeX}
    child { node {\pdfLaTeX}
      edge from parent node[engine, sloped] {\pdfTeX}}
    child { node {\XeLaTeX}
      edge from parent node[engine, left]   {\XeTeX} }
    child { node {\LuaLaTeX}
      edge from parent node[engine, sloped] {\LuaTeX}}
  }
  child { node {\ConTeXt} }
;
\end{tikzpicture}
\end{document}


A tree growing up with children in inverted order


\documentclass[tikz,border=10pt]{standalone}
\begin{document}
\begin{tikzpicture}[grow'=up]
\node {A}
  child { node {1} }
  child { node {2} }
  child { node {3} }
  child { node {4} }
  child { node {5} }
;
\end{tikzpicture}
\end{document}



 A mind map with root and two levels
\documentclass[tikz,border=10pt]{standalone}
\usetikzlibrary{mindmap}
\begin{document}
\begin{tikzpicture}[
  mindmap,
  text = white,
  concept color = blue!50,
  nodes = {concept},
  root/.append style = {
    font = \Huge\sffamily\bfseries},
  level 1 concept/.append style =
    {font = \Large\sffamily, sibling angle=90},
  level 2 concept/.append style =
    {font = \normalsize\sffamily}
  ]
  \node [root] {TikZ} [clockwise from=0]
    child [concept color=blue] {
      node {Graphs} [clockwise from=90]
        child { node {Trees} }
        child { node {Mind maps} }
        child { node {DOT syntax} }
        child { node {Algorithms} }
    };
\end{tikzpicture}
\end{document}


 A comprehensive mind map

\documentclass[tikz,border=10pt]{standalone}
\usetikzlibrary{mindmap}
\begin{document}
\begin{tikzpicture}[
  mindmap,
  text = white,
  concept color = blue!50,
  nodes = {concept},
  root/.append style = {
    font = \Huge\sffamily\bfseries},
  level 1 concept/.append style =
    {font = \Large\sffamily, sibling angle=90},
  level 2 concept/.append style =
    {font = \normalsize\sffamily}
  ]
  \node [root] {TikZ} [clockwise from=0]
    child [concept color=blue] {
      node {Graphs} [clockwise from=90]
        child { node {Trees} }
        child { node {Mind maps} }
        child { node {DOT syntax} }
        child { node {Algorithms} }
    }
    child [concept color=green] {
      node {Basics} [clockwise from=30]
        child { node {Drawing} }
        child { node {Colors} }
        child { node {Nodes} }
        child { node {Edges} }
        child { node {Styles} }
    }
    child [concept color=red] {
      node {Diagrams} [clockwise from=-90]
        child { node {Flow charts} }
        child { node {Bar charts} }
        child { node {Pie charts} }
        child { node {Venn diagrams} }
    }
    child [concept color=orange!80] {
      node {Advanced} [clockwise from=180]
        child { node {Shading\\Fading} }
        child { node {Deco\-rations} }
        child { node {Transfor\-mations} }
        child { node {Scopes\\Overlays} }
    };
\end{tikzpicture}
\end{document}



Node chains in a graph


\documentclass[tikz,border = 10pt]{standalone}
\usetikzlibrary{graphs}
\begin{document}
\begin{tikzpicture}[nodes = {text depth = 1ex,
    text height = 2ex}]
  \graph { tex -> dvi -> ps -> pdf,
           bib -> bbl,
           bbl -> dvi };
\end{tikzpicture}
\end{document}


Edge quotes in a graphc
\documentclass[tikz,border = 10pt]{standalone}
\usetikzlibrary{graphs,quotes}
\begin{document}
\begin{tikzpicture}[nodes = {text depth = 1ex,
    text height = 2ex},
    every edge quotes/.style = {font=\tiny\ttfamily,
  above, inner sep = 0pt}]
  \graph [grow right = 2cm]
    { tex -> ["latex"] dvi
          -> ["dvips"] ps -> ["ps2pdf"] pdf };
\end{tikzpicture}
\end{document}


A simple matrix node
\documentclass[tikz,border = 10pt]{standalone}
\begin{document}
\begin{tikzpicture}
  \node[matrix,draw]  {
    \node{A}; & \node{B}; & \node{C}; \\
    \node{D}; & \node{E}; & \node{F}; \\
  };
\end{tikzpicture}
\end{document}


 A vertical flowchart with flat colors and without shadows
\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\smartdiagramset{font=\sffamily,
   text width = 3cm, back arrow disabled}
\tikzset{module/.append style=
  { top color=\col, bottom color=\col},
  every shadow/.style = {fill=none, shadow scale=0}}
\begin{document}
\smartdiagram[flow diagram]{
  Define styles, Position nodes, Add arrows,
  Add labels, Review and refine}
\end{document}



A sequence diagram with custom colors

\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\begin{document}
\smartdiagramset{sequence item font size=\sffamily\Large\strut,
   set color list={red!80, red!60, red!45, red!30} }
\tikzset{module/.append style = {top color=\col} }
\smartdiagram[sequence diagram]{
  Styles, Positions, Arrows, Labels}
\end{document}


 A circular diagram
\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\smartdiagramset{font=\sffamily}
\begin{document}
\smartdiagram[circular diagram:clockwise]{
  Define styles, Position nodes, Add arrows,
  Add labels, Review and refine}
\end{document}


A bubble diagram
\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\smartdiagramset{bubble node font=\sffamily\Large,
 bubble center node font=\sffamily\Huge}
\begin{document}
\smartdiagram[bubble diagram]{Diagrams,
      Nodes, Edges, Arrows, Labels, Colors}
\end{document}




A connected constellation diagram

\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\smartdiagramset{planet font=\sffamily\LARGE,
  planet text width=2.2cm,
  satellite font=\sffamily}
\begin{document}
\smartdiagram[connected constellation diagram]{
  Drawing diagrams, Define styles,
  Position nodes, Add arrows, Add labels}
\end{document}

A constellation diagram with arrows
\documentclass[tikz,border=10pt]{standalone}
\usepackage{smartdiagram}
\usetikzlibrary{shapes.geometric}
\smartdiagramset{planet font=\sffamily\Huge,
   satellite font=\sffamily,
   planet color=green!40, uniform connection color=true,
   uniform color list = red!40 for 8 items}
\tikzset{satellite/.append style={regular polygon,
  regular polygon sides=8, inner sep=0pt},
  planet/.append style={regular polygon,
  regular polygon sides=8, inner sep=6pt}}
\begin{document}
\smartdiagram[constellation diagram]{TikZ,
  pgfplots, smartdiagram, hobby, tikzducks,
  tikzlings, tikzpeople, tikzmark, tikz-ext}
\end{document}